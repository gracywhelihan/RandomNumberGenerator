/*
  This code demonstrates an MQTT arduino client that connects to a broker, subsrcibes to a topic.
  Then can use the data from the MQTT broker.
  This code uses https://randomnumbergenerator.cloud.shiftr.io/ as the MQTT broker.
  To get the broker username and password please email vgw3869@nyu.edu
  the arduino_secrets.h file:
  #define SECRET_SSID ""    // network name
  #define SECRET_PASS ""    // network password
  #define SECRET_MQTT_USER "public" // broker username
  #define SECRET_MQTT_PASS "public" // broker password

  created 24 April 2024
  Sourse code modified from code written by Tom Igoe https://github.com/tigoe/mqtt-examples/blob/main/arduino-clients/ArduinoMqttClient/ArduinoMqttClient.ino
*/


//Wifi & MQTT Set up
#include <WiFiNINA.h>
#include <ArduinoMqttClient.h>
#include <Wire.h>

#include "Adafruit_SHT31.h"
#include "secrets.h"

// initialize WiFi connection:
WiFiSSLClient wifi; // secure wifi client
// WiFiClient wifi; // unsecure wifi client
MqttClient mqttClient(wifi);

// details for MQTT client:
char broker[] = "randomnumbergenerator.cloud.shiftr.io";

//int port = 1883; // unsecure port for shiftr
int port = 8883; // secure port for shiftr
char topic[] = "randomNumber";
String clientID = "listeningArduino";

float randomNum;

void setup() {

  // MQTT & wifi setup()
   // initialize serial:
  Serial.begin(9600);
  
  // wait for serial monitor to open:
  if (!Serial) delay(3000);

  // initialize WiFi, if not connected:
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print("Connecting to ");
    Serial.println(SECRET_SSID);
    WiFi.begin(SECRET_SSID, SECRET_PASS);
    delay(2000);
  }

  // print when connected to wifi
  Serial.println("Connected to wifi.");
  // ADD LED for WIFI CONNECTION

 byte mac[6];
  WiFi.macAddress(mac);
  for (int i = 0; i < 3; i++) {
    clientID += String(mac[i], HEX);
  }

  // set the credentials for the MQTT client:
    mqttClient.setId(clientID);
  // login to the broker with a username and password:
    mqttClient.setUsernamePassword(SECRET_MQTT_USER, SECRET_MQTT_PASS);

  // try to connect to the MQTT broker once you're connected to WiFi:
  while (!connectToBroker()) {
    Serial.println("attempting to connect to broker");
    delay(1000);
  }
  Serial.println("Connected to randomnumbergenerator broker.");
  // ADD LED for MQTT CONNECTION

  mqttClient.subscribe(topic);
}

void loop() {

  //MQTT & wifi loop
  // if not connected to the broker, try to connect:
  if (!mqttClient.connected()) {
    Serial.println("reconnecting");
    connectToBroker();
  }

 int messageSize = mqttClient.parseMessage();
  if (messageSize) {
    // randomNum is a decimal between 0 and 1
    randomNum = atof(mqttClient.readString().c_str());
  }
}




boolean connectToBroker() {
  // if the MQTT client is not connected:
  if (!mqttClient.connect(broker, port)) {
    // print out the error message:
    Serial.print("MOTT connection failed. Error no: ");
    Serial.println(mqttClient.connectError());
    // return that you're not connected:
    return false;
  }
  // once you're connected, you
  // return that you're connected:
  return true;
}
